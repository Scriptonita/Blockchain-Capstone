// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require("Verifier");
const truffleAssert = require("truffle-assertions");

contract("Verifier", accounts => {
  beforeEach(async function () {
    this.contract = await SquareVerifier.new({ from: accounts[0] });
  });

  // Test verification with correct proof
  // - use the contents from proof.json generated from zokrates steps
  it("Should verificate with correct proof", async function () {
    const { proof, inputs } = require("../../zokrates/code/square/proof.json");

    const tx = await this.contract.verifyTx(proof.a, proof.b, proof.c, inputs);
    await truffleAssert.eventEmitted(tx, "Verified");
  });

  // Test verification with incorrect proof
  it("Should not verificate with incorrect proof", async function () {
    const { proof } = require("../../zokrates/code/square/proof.json");
    const fakeProof =
      "0x1ba0df5159c4c75da8a30d34e28b0a2242b9634aed77c9b41b979e6081ed5033";
    const inputs = [fakeProof, fakeProof];

    const tx = await this.contract.verifyTx(proof.a, proof.b, proof.c, inputs);
    await truffleAssert.eventNotEmitted(tx, "Verified");
  });
});
